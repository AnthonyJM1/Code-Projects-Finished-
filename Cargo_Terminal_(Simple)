/* Anthony Molina
 * February 26, 2025
 * Cargo Terminal Example (Simple)
 *
 */

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class MolinaAnthonyAssignment4 {

	public static void main(String[] args) throws IOException {

		// Opening Planes File
		final String FILE_NAME_PLANES = "FedExPlanes.txt";
		File inputFilePlanes = new File(FILE_NAME_PLANES);
		Scanner inputFile = new Scanner(inputFilePlanes);
		int numberStands = inputFile.nextInt();

		// Opening Truck File
		final String FILE_NAME_TRUCKS = "FedExTrucks.txt";
		File inputFileTrucks = new File(FILE_NAME_TRUCKS);
		Scanner inputFileTruck = new Scanner(inputFileTrucks);
		int numberDocks = inputFileTruck.nextInt();

		CargoTerminal terminal = new CargoTerminal(numberDocks, numberStands) {
		};
		// Reading through the plane file.
		while (inputFile.hasNextInt()) {
			int stand = inputFile.nextInt();
			int flightNumber = inputFile.nextInt();
			double capacity = inputFile.nextDouble();
			String cargoType = inputFile.next();
			String destinationCity = inputFile.nextLine();

			// Create finished CargoPlane object and store in CargoTerminal
			CargoPlane plane = new CargoPlane(flightNumber, capacity, cargoType, destinationCity);
			terminal.addCargoPlane(stand, plane);
		}
		inputFile.close();

		// Reading through the truck file.
		while (inputFileTruck.hasNextInt()) {
			int dock = inputFileTruck.nextInt();
			int truckNumber = inputFileTruck.nextInt();
			String destinationCity = inputFileTruck.nextLine();
			// Create finished SemiTruck object and store in CargoTerminal
			SemiTruck truck = new SemiTruck(truckNumber, destinationCity);
			terminal.addSemiTruck(dock, truck);
		}
		inputFileTruck.close();

		// Display Cargo Terminal Status

		terminal.displayCargoTerminal();
		System.out.println();

		// Beginning sort and reading the filled docks.
		System.out.println(terminal.getSemiTruck(0).toString());
		ArrayList<SemiTruck> shippingDockReady = new ArrayList<>();
		int numberOfDocks = terminal.getNumberDocks();
		// Running through the CargoTerminal array for SemiTrucks and seeing which spots
		// are null, if no put them in the newly created ArrayList.
		for (int i = 0; i < numberOfDocks; i++) {
			SemiTruck truck1 = terminal.getSemiTruck(i);

			if (truck1 != null) {
				shippingDockReady.add(truck1);
			}

		}
		// Sorting method based on Alphabetical Order of Destination City
		Collections.sort(shippingDockReady);
		// Display the ArrayList
		for (int i = 0; i < shippingDockReady.size(); i++) {
			SemiTruck truck = shippingDockReady.get(i);
			System.out.printf("%d\t %s\n", truck.getTruckNumber(), truck.getDestinationCity());
		}
		// Beginning sort and reading the filled stands.
		System.out.println();
		System.out.println(terminal.getCargoPlane(0).toString());
		ArrayList<CargoPlane> tarmacReady = new ArrayList<>();
		int numberOfStands = terminal.getNumberStands();
		// Running through CargoTerminal Array for CargoPlanes and seeing which stands
		// are null, if not null then put it in the newly created ArrayList.
		for (int i = 0; i < numberOfStands; i++) {
			CargoPlane plane1 = terminal.getCargoPlane(i);

			if (plane1 != null) {
				tarmacReady.add(plane1);
			}

		}
		// Sorting method based on Capacity(Lowest to Highest)
		Collections.sort(tarmacReady);
		for (int i = 0; i < tarmacReady.size(); i++) {
			CargoPlane plane = tarmacReady.get(i);
			System.out.printf("%-10d %-10s %-12s %10.2f%n", plane.getFlightNumber(), plane.getDestinationCity(),
					plane.getCargoType(), plane.getCapacity());
		}
	}
}

// Abstract CargoTerminal class managing both planes and trucks
abstract class CargoTerminal {
	private int numberDocks;
	private int numberStands;
	private SemiTruck[] loadingDock;
	private CargoPlane[] tarmac;

	public CargoTerminal(int numberDocks, int numberStands) {
		this.numberDocks = numberDocks;
		this.numberStands = numberStands;
		this.loadingDock = new SemiTruck[numberDocks];
		this.tarmac = new CargoPlane[numberStands];
	}

	public int getNumberDocks() {
		return numberDocks;
	}

	public int getNumberStands() {
		return numberStands;
	}

	public void addSemiTruck(int dock, SemiTruck semiTruck) {
		if (dock >= 0 && dock < loadingDock.length) {
			loadingDock[dock] = semiTruck;
		} else {
			System.out.println("Invalid Dock!");
		}
	}

	public void addCargoPlane(int stand, CargoPlane plane) {
		if (stand >= 0 && stand < tarmac.length) {
			tarmac[stand] = plane;
		} else {
			System.out.println("Invalid Stand!");
		}
	}

	public SemiTruck getSemiTruck(int dock) {
		if (dock >= 0 && dock < loadingDock.length) {
			return loadingDock[dock];
		}
		return null;
	}

	public CargoPlane getCargoPlane(int stand) {
		if (stand >= 0 && stand < tarmac.length) {
			return tarmac[stand];
		}
		return null;
	}

	public void displayCargoTerminal() {
		System.out.println("Loading semi-trucks and planes into cargo terminal...");
		System.out.println();
		// Printing each dock and possible truck in that spot.
		for (int n = 0; n < loadingDock.length; n++) {
			System.out.printf("Dock %d\t", n);
		}
		System.out.println();
		for (int n = 0; n < loadingDock.length; n++) {

			if (getSemiTruck(n) != null) {
				System.out.printf("%4d\t", getSemiTruck(n).getTruckNumber());
			} else {
				System.out.printf("---\t"); // Placeholder for empty docks
			}
		}
		System.out.println();
		// Printing each stand and possible plane in that spot.
		for (int i = 0; i < tarmac.length; i++) {
			System.out.printf("Stand %d\t", i);
		}
		System.out.println();
		for (int n = 0; n < tarmac.length; n++) {
			if (getCargoPlane(n) != null) {
				System.out.printf("%4d\t", getCargoPlane(n).getFlightNumber());
			} else {
				System.out.printf("---\t"); // Placeholder for empty docks
			}

		}

	}
}

// CargoPlane subclass
class CargoPlane implements Comparable<CargoPlane> {
	private int flightNumber;
	private double capacity;
	private String cargoType;
	private String destinationCity;

	public CargoPlane(int flightNumber, double capacity, String cargoType, String destinationCity) {
		this.flightNumber = flightNumber;
		this.capacity = capacity;
		this.cargoType = cargoType;
		this.destinationCity = destinationCity;
	}

	public int getFlightNumber() {
		return flightNumber;
	}

	public String getDestinationCity() {
		return destinationCity;
	}

	public String getCargoType() {
		return cargoType;
	}

	public double getCapacity() {
		return capacity;
	}

	@Override
	public String toString() {
		return String.format("************************************************\n" + "\t\tTarmac Status\n"
				+ "\t(Lowest to Highest Capacity)\n" + "************************************************\n"
				+ "Flight\tDeparting To\tCargo\tCapacity(lbs)\n" + "------------------------------------------------");
	}

	@Override
	public int compareTo(CargoPlane otherCargoPlane) {
//Comparing the plane's capacity, -1 is less than, 1 is more than, 0 is both have equal capacity
		if (this.capacity < otherCargoPlane.capacity) {
			return -1;
		} else if (this.capacity > otherCargoPlane.capacity) {
			return 1;
		} else {
			return 0;
		}
	}
}

// SemiTruck class
class SemiTruck implements Comparable<SemiTruck> {
	private int truckNumber;
	private String destinationCity;

	public SemiTruck(int truckNumber, String destinationCity) {
		this.truckNumber = truckNumber;
		this.destinationCity = destinationCity;
	}

	public int getTruckNumber() {
		return truckNumber;
	}

	public String getDestinationCity() {
		return destinationCity;
	}

	@Override
	public String toString() {
		return String.format("************************************************\n" + "\t Loading Dock Status\n"
				+ "\t(By Destination Status)\n" + "************************************************"
				+ "\nTruck #\t Destination City\n------------------------------------------------");

	}

	@Override
	public int compareTo(SemiTruck otherSemiTruck) {
		// Pulling out the first letter of Destination City for the trucks being passed.

		char char1 = this.destinationCity.charAt(0);
		char char2 = otherSemiTruck.destinationCity.charAt(0);
		// If less than -1, if more than 1, and if the two have the same letter than 0.
		if (char1 < char2) {
			return -1;
		} else if (char1 > char2) {
			return 1;
		} else {
			return 0;
		}
	}
}
